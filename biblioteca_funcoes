#! /bin/bash
# Script para controle e acompanhamento de relacionamento com cliente

# Variáveis do sistema
PATH_BASE="$HOME/Dropbox/RA-Compartilhamento/crm-cli"
PATH_DOCUMENTOS="${HOME}/Downloads"

source "${PATH_BASE}/bash-ui"

PATH_CLIENTES_LISTA="${PATH_BASE}/clientes/.lista"
PATH_FUNIS="${PATH_BASE}/modulos"
PATH_MODELOS="${PATH_BASE}/documentos/modelos"
MENU_INICIAL="Pesquisar cliente\nCadastrar cliente\nRelatórios\nSair"
DATA_HOJE="$(printf '%(%Y-%m-%d)T\n' -1)"
DATA_AGORA="$(printf '%(%Y-%m-%d_%H%M)T\n' -1)"
DATA_UMA_SEMANA="$(date --date="1 week" +"%Y-%m-%d")"
LISTA_FUNIL="$(find "${PATH_FUNIS}/" -name "*.funil" -printf "%f\n")"
LISTA_MODELOS="$(find "${PATH_MODELOS}/" -name "*.html" -printf "%f\n")"
FZF_OPT="--height=30% --layout=default"

# Funções
limpa_numeros(){
    local tmp=${1//./}
    echo ${tmp//-/}
}

verifica_amb(){
    # Folders: clientes, modulos
    # arquivos: bash-ui crm_cli.sh clientes/.lista modulos/.funis
    echo "[info] Verificando ambiente..."
    echo "[info] "
    echo "[info] Preparando lista de funis de venda..."
    echo "[info] Iniciando sistema..."
}

menu_inicial(){
    selected="$(echo -e $MENU_INICIAL | fzf $FZF_OPT --prompt 'Selecione uma opção: ')"
    case "$selected" in
        "Pesquisar cliente")
            pesquisar_cliente
            ;;
        "Cadastrar cliente")
            cadastrar_cliente
            ;;
        "Relatórios")
            relatorios
            ;;
        *)
            exit
            ;;
    esac
}

enviar_email(){
    #Argumentos: 1 nome, 2 cpf, 3 mail, 4 assunto, 5 modelo, 6 processo_id
    local path_mail="${PATH_BASE}/mails"
    local to_name="$1"
    local to_cpf="$2"
    local to_mail="$3"
    local subj="$4"
    local modelo="${5:-default}"
    local mail_file_pend="${PATH_BASE}/clientes/${to_cpf}/mails/pendentes/${DATA_AGORA}_${subj}"
    local mail_file_sent="${PATH_BASE}/clientes/${to_cpf}/mails/enviados/${DATA_AGORA}_${subj}"
    local path_funil="${PATH_BASE}/clientes/${to_cpf}/funis"

    case "$modelo" in
        "processo")
            body="$(cat "${path_mail}/processo")"
            ee_processo="$(egrep -E "^${ee_id}" "${path_funil}" | cut -d\| -f 6)"
            ee_descricao="$(egrep -E "^${ee_id}" "${path_funil}" | cut -d\| -f 3)"
            ee_tipo="$(egrep -E "^${ee_id}" "${path_funil}" | cut -d\| -f 4)"
            ee_local="$(egrep -E "^${ee_id}" "${path_funil}" | cut -d\| -f 5)"
            body="${body/:numero:/"${ee_processo}"}"
            body="${body/:local:/"${ee_local}"}"
            body="${body/:tipo:/"${ee_tipo}"}"
            body="${body/:descricao:/"${ee_descricao}"}"
            ;;
        *)
            body="$(cat "${path_mail}/default")"
            ;;
    esac
    body="${body/:to_name:/"$to_name"}"
    echo -e "$body" > "${mail_file_pend}"

    neomutt -EF ~/.config/mutt/accounts/victorbruno-cajatysantiago/settings -s "${subj}" -i "${mail_file_pend}" -- "${to_mail}"
    mv "${mail_file_pend}" "${mail_file_sent}"
    cadastrar_historico "${to_cpf}" "Enviado e-mail [$subj]" "#email"
    pesquisar_cliente "${to_cpf}"
}

copiar_dados(){
    #Argumentos: 1 cpf
    local cd_cadastro="$(cat ${PATH_BASE}/clientes/${1}/cadastro)"
    local cd_processos="$(awk -F "|" '{print $3":",$6}' "${PATH_BASE}/clientes/${1}/funis")"
    local cd_menu="${cd_cadastro}\n${cd_processos}"
    local selected="$(echo -e "${cd_menu}" | fzf $FZF_OPT --prompt 'Selecione dado a ser copiado ')"
    [ "$selected" != "" ] || exit
    echo "${selected#*: }" | xclip -selection clipboard
    notify-send "CRM-CLI" "Texto copiado no clipboard." -u low &
}

gerar_documento(){
    local path_tmp="${PATH_BASE}/documentos"
    local novo_tmp_html="${path_tmp}/tmp/${2}.tmp.html"
    local novo_tmp_pdf="${path_tmp}/tmp/${2}.tmp.pdf"
    local novo_pdf="${PATH_DOCUMENTOS}/${2}.pdf"
    local modelo="${path_tmp}/modelos/${1}"
    local timbrado="${path_tmp}/timbrado.pdf"
    local data="$(date "+%d de %B de %Y")"

    cp "$modelo" "$novo_tmp_html"

    sed -i "
        s~::nome::~${2}~g
        s~::estado_civil::~${3}~g
        s~::profissao::~${4}~g
        s~::rg::~${5}~g
        s~::cpf::~${6}~g
        s~::endereco::~${7}~g
        s~::cep::~${8}~g
        s~::telefone::~${9}~g
        s~::email::~${10}~g
        s~::objeto::~${11}~g
        s~::data::~${data}~g
    " "${novo_tmp_html}"    
    pushd "${path_tmp}/tmp"
    libreoffice --convert-to "pdf" "${novo_tmp_html}"
    pdftk "${novo_tmp_pdf}" stamp "${timbrado}" output "${novo_pdf}"    
    rm "$novo_tmp_html" "$novo_tmp_pdf"
    pushd
}

qualificacao(){
    local q_file="${PATH_BASE}/clientes/${1}/cadastro"
    local content="$(echo -e "$(<"${q_file}")")"
    q_nome="$(sed -n 's/Nome: //g;1p' <<< "${content}")"
    q_cpf="$(sed -n 's/CPF: //g;2p' <<< "${content}")"
    q_telefone="$(sed -n 's/Telefone: //g;3p' <<< "${content}")"
    q_email="$(sed -n 's/E-mail: //g;4p' <<< "${content}")"
    q_estado_civil="$(sed -n 's/Estado civil: //g;7p' <<< "${content}")"
    q_profissao="$(sed -n 's/Profissão: //g;8p' <<< "${content}")"
    q_rg="$(sed -n 's/RG: //g;9p' <<< "${content}")"
    q_endereco="$(sed -n 's/Endereço: //g;10p' <<< "${content}")"
    q_cep="$(sed -n 's/CEP: //g;11p' <<< "${content}")"
}

verificar_qualificacao(){
    qualificacao "${1}"
    [[ -z "${q_estado_civil}" ]] && cls && dialog_msg "Qualificação incompleta" && editar_qualificacao "${1}"
}

preparar_doc(){
    cls
    text_color "GERAR DOCUMENTO" 2
    single_line
    qualificacao "${1}"
    read -e -p "Informe o objeto do contrato: " -i "Reclamação trabalhista em face do Metrô-DF" gd_objeto
    gerar_documento "${modelo_selected}" "${q_nome}" "${q_estado_civil}" "${q_profissao}" "${q_rg}" "${q_cpf}" "${q_endereco}" "${q_cep}" "${q_telefone}" "${q_email}" "${gd_objeto}" 
}

menu_edicao(){
    #Argumentos: 1 CPF
    conteudo_atual="$(egrep "\|${1}\|" "$PATH_CLIENTES_LISTA")"
    me_nome="$(echo "$conteudo_atual" | cut -d\| -f1)"
    me_cpf="$(echo "$conteudo_atual" | cut -d\| -f2)"
    me_telefone="$(echo "$conteudo_atual" | cut -d\| -f3)"
    me_email="$(echo "$conteudo_atual" | cut -d\| -f4)"
    me_etiquetas="$(echo "$conteudo_atual" | cut -d\| -f5)"

    menu_edicao="Voltar/Sair\nEditar Nome\nEditar CPF\nEditar Telefone\nEditar E-mail\nEditar Status\nEditar Etiquetas\nCopiar dados\nIncluir Histórico\nIncluir Funil\nIncluir Pendência\nVer Histórico\nVer Pendências\nConcluir Pendência\nExcluir Funil\nCadastrar Processo\nEnviar E-mail\nEditar Qualificação\nGerar Documento"

    selected="$(echo -e $menu_edicao | fzf --height=5% --layout=default --prompt 'Selecione uma opção: ')"
    case "$selected" in
        "Editar Nome")
            read -e -p "Informe o novo nome: " -i "${me_nome}" novo_valor
            editar_cliente "${1}" "nome" "${novo_valor}"
            ;;
        "Editar Telefone")
            read -e -p "Informe o novo telefone: " -i "${me_telefone}" novo_valor
            editar_cliente "${1}" "telefone" "${novo_valor}"
            ;;
        "Editar E-mail")
            read -e -p "Informe o novo e-mail: " -i "${me_email}" novo_valor
            editar_cliente "${1}" "email" "${novo_valor}"
            ;;
        "Editar CPF")
            read -e -p "Informe o novo CPF: " -i "${1}" novo_valor
            novo_valor=$(limpa_numeros $novo_valor)
            editar_cliente "${1}" "cpf" "${novo_valor}"
            ;;
        "Editar Status")
            novo_valor="$(echo -e "Quente\nNeutro\nFrio" | fzf $FZF_OPT --prompt 'Selecione o status atual: ')"
            editar_cliente "${1}" "status" "${novo_valor}"
            ;;
        "Editar Etiquetas")
            read -e -p "Informe as novas etiquetas: " -i "${me_etiquetas}" novo_valor
            editar_cliente "${1}" "etiquetas" "${novo_valor}"
            ;;
        "Editar Qualificação")
            editar_qualificacao "${1}"
            pesquisar_cliente "${1}"
            ;;
        "Enviar E-mail")
            [[ -z $me_email ]] && cls && dialog_msg "Cliente não possui e-mail cadastrado" && pesquisar_cliente "${me_cpf}"
            path_funil="${PATH_BASE}/clientes/${1}/funis"
            ee_lista="Novo\nVoltar/Sair\n"
            ee_lista+="$(awk -F "|" '{print $1,$3,$6,"-",$2}' "${path_funil}")"
            ee_id="$(echo -e "$ee_lista" | fzf $FZF_OPT --prompt 'Selecione o modelo do e-mail: ')"
            ee_id="$(echo ${ee_id%% *})"
            case "$ee_id" in
                "Voltar/Sair")
                    pesquisar_cliente "${1}"
                    ;;
                "Novo")
                    enviar_email "${me_nome}" "${me_cpf}" "${me_email}" "[CS] Informações" "default"
                    ;;
                *)
                    ee_descricao="$(egrep -E "^${ee_id}" "${path_funil}" | cut -d\| -f 3)"
                    enviar_email "${me_nome}" "${me_cpf}" "${me_email}" "[CS] Informações sobre ${ee_descricao}" "processo" "${ee_id}"
                    ;;
            esac
            ;;
        "Copiar dados")
            copiar_dados "${1}"
            pesquisar_cliente "${1}"
            ;;
        "Incluir Histórico")
            read -p "Informe o histórico: " novo_valor
            cadastrar_historico "${1}" "${novo_valor}" "#manual"
            pesquisar_cliente ${1}
            ;;
        "Incluir Funil")
            if_arquivo="$(echo -e "$LISTA_FUNIL" | fzf $FZF_OPT --prompt 'Selecione funil a incluir: ')"
            cadastrar_funil "${1}" "${if_arquivo}"
            ;;
        "Excluir Funil")
            ef_lista="Voltar/Sair\n"
            ef_lista+="$(awk -F "|" '{print $1,$3,$6,"-",$2}' "${PATH_BASE}/clientes/${1}/funis")"
            ef_id="$(echo -e "$ef_lista" | fzf $FZF_OPT --prompt 'Selecione funil a excluir: ')"
            ef_id="$(echo ${ef_id%% *})"
            [[ $ef_id == "Voltar/Sair" ]] && pesquisar_cliente ${1} || excluir_funil "${1}" "${ef_id}"
            ;;
        "Cadastrar Processo")
            path_funil="${PATH_BASE}/clientes/${1}/funis"
            cp_lista="Voltar/Sair\n"
            cp_lista+="$(awk -F "|" '{print $1,$3,$6,"-",$2}' "${path_funil}")"
            cp_id="$(echo -e "$cp_lista" | fzf $FZF_OPT --prompt 'Selecione funil a cadastrar/alterar processo: ')"
            cp_id="$(echo ${cp_id%% *})"
            cp_processo="$(egrep -E "^${cp_id}" "${path_funil}" | cut -d\| -f 6)"
            cp_descricao="$(egrep -E "^${cp_id}" "${path_funil}" | cut -d\| -f 3)"
            read -e -p "Informe o número do processo: " -i "${cp_processo}" cp_novo_processo
            cp_novo_processo=$(limpa_numeros $cp_novo_processo)
            read -e -p "Informe a nova descrição: " -i "${cp_descricao}" cp_nova_descricao
            [[ $ef_id == "Voltar/Sair" ]] && pesquisar_cliente ${1} || editar_processo "${1}" "${cp_id}" "${cp_novo_processo}" "${cp_nova_descricao}"
            ;;
        "Incluir Pendência")
            read -p "Informe a pendência: " novo_valor
            cadastrar_pendencia "${1}" "${DATA_UMA_SEMANA}" "manual" "${novo_valor}"
            pesquisar_cliente "${1}"
            ;;
        "Concluir Pendência")
            path_pend="${PATH_BASE}/clientes/${1}/pendencias"
            cp_lista="Voltar/Sair\n"
            #cp_lista+="$(cat "${path_pend}" | cut -d\| -f1,3,6 | sort)"
            cp_lista+="$(awk -F "|" '{print $3"|"$1"|"$6}' "${path_pend}" | sort)"
            cp_id="$(echo -e "$cp_lista" | fzf $FZF_OPT --prompt 'Selecione pendencia a ser concluída: ' | cut -d\| -f2)"
            [[ $cp_id == "Voltar/Sair" ]] && pesquisar_cliente ${1} || concluir_pendencia "${1}" "${cp_id}"
            ;;
        "Ver Pendências")
            vim "${PATH_BASE}/clientes/${1}/pendencias"
            pesquisar_cliente "${1}"
            ;;
        "Ver Histórico")
            vim "${PATH_BASE}/clientes/${1}/historico"
            pesquisar_cliente "${1}"
            ;;
        "Gerar Documento")
            modelo_selected="$(echo -e "${LISTA_MODELOS}" | fzf $FZF_OPT --prompt 'Selecione o modelo: ')"
            verificar_qualificacao "${1}"
            preparar_doc "${1}"
            pesquisar_cliente "${1}"
            ;;
        *)
            default
            ;;
    esac
}

cadastrar_funil(){
    #Argumentos: 1 CPF, 2 arquivo do funil
    if [ "$#" -eq 2 ]
        then
           "$PATH_FUNIS/${2}" "${1}"
    fi
}

excluir_funil(){
    #Argumentos: 1 CPF, 2 funil id
    if [ "$#" -eq 2 ]
        then
            path_funil="${PATH_BASE}/clientes/${1}/funis"
            path_pend="${PATH_BASE}/clientes/${1}/pendencias"
            ef_id="$(egrep "${2}" ${path_funil} | cut -d\| -f 1)"
            sed -i -E "/^${2}\|/d" "${path_funil}"
            sed -i -E "/funil_id${2}/d" "${path_pend}"
            cadastrar_historico "${1}" "Excluído funil [${ef_descricao}]" "#funil"
            pesquisar_cliente ${1}
    fi
}

editar_processo(){
    #Argumentos: 1 cpf, 2 funil id, 3 número do processo, 4 descrição 
    path_funil="${PATH_BASE}/clientes/${1}/funis"
    sed -i -E '/^'"$2"'\|/s/[^|]*/'"$3"'/6' "$path_funil"
    sed -i -E '/^'"$2"'\|/s/[^|]*/'"$4"'/3' "$path_funil"
    cadastrar_historico "${1}" "Editado processo do funil id [${2}] para [Número ${3} Descrição ${4}]" "#auto"
    pesquisar_cliente "${1}"
}

cadastrar_historico(){
    #Argumentos: 1 CPF, 2 descrição, 3 tags
    if [ "$#" -eq 3 ]
        then
            path_hist="${PATH_BASE}/clientes/${1}/historico"
            linha="$DATA_HOJE: $2 $3"
            echo -e "$linha" >> "$path_hist"

        else
            echo "Não foi possível criar anotação automática. Favor informar os dados a seguir."
            read -p "Descrição: " descricao
            read -p "CPF: " cpf
            read -p "Tags: " tags
            path_hist="${PATH_BASE}/clientes/${cpf}/historico"
            linha="$DATA_HOJE: $descricao $tags"
            echo -e "$linha" >> "$path_hist"
    fi
}

cadastrar_pendencia(){
    #Argumentos: 1 CPF, 2 limite, 3 origem, 4 descrição
    if [ "$#" -eq 4 ]
        then
            path_pend="${PATH_BASE}/clientes/${1}/pendencias"
            cp_id="$(awk '{id=$1+1}END{print id}' ${path_pend})"
            [[ -z "${cp_id}" ]] && cp_id=1
            #Linha: data | limite | origem | cpf | descrição
            linha="${cp_id}|${DATA_HOJE}|${2}|${3}|${1}|${4}"
            echo -e "$linha" >> "$path_pend"
            cadastrar_historico "${1}" "Criada pendência [${4}]" "#auto"

        else
            echo "Não foi possível criar pendência automática. Favor informar os dados a seguir."
            read -p "Descrição: " descricao
            read -p "CPF: " cpf
            path_pend="${PATH_BASE}/clientes/${cpf}/pendencias"
            cp_id="$(awk '{id=$1+1}END{print id}' ${path_pend})"
            [[ ${cp_id} == "" ]] && ${cp_id}=1
            linha="${cp_id}|${DATA_HOJE}|${DATA_UMA_SEMANA}|manual|${cpf}|${descricao}"
            echo -e "$linha" >> "$path_pend"
            cadastrar_historico "${1}" "Criada pendência [${descricao}]" "#manual"
            pesquisar_cliente ${1}
    fi
}

concluir_pendencia(){
    #Argumentos: 1 CPF, 2 Id da pendência
    if [ "$#" -eq 2 ]
        then
            path_pend="${PATH_BASE}/clientes/${1}/pendencias"
            cp_descricao="$(egrep "^${2}\|" ${path_pend} | cut -d\| -f 6)"
            sed -i -E "/^${2}\|/d" "${path_pend}"
            cadastrar_historico "${1}" "Concluída pendência [${cp_descricao}]" "#manual"
            pesquisar_cliente ${1}
    fi

}

pesquisar_cliente(){
    if [ "$#" -eq 1 ]
    then
        cpf="${1}"
    else
        local pc_lista="Voltar/Sair\nCadastrar novo cliente\n"
        local pc_lista+="$(cat ${PATH_BASE}/clientes/.lista | cut -d\| -f 1-3)"
        local selected="$(echo -e "$pc_lista" | fzf $FZF_OPT --prompt 'Pesquisar: ')"
        case "$selected" in
            "Voltar/Sair")
                default
                ;;
            "Cadastrar novo cliente")
                cadastrar_cliente
                ;;
            *)
                cpf="$(echo "$selected" | cut -d\| -f2 )"
            ;;
        esac
    fi

    path_cliente="${PATH_BASE}/clientes/${cpf}"
    clear
    text_color "DADOS DO CLIENTE"
    head -n6 "${path_cliente}/cadastro"
    single_line
    text_color "PENDENCIAS"
    cat "${path_cliente}/pendencias" | cut -d\| -f 3,6 | sed "s/|/: /g" | sort | head -n5
    single_line
    text_color "FUNIS"
    cat "${path_cliente}/funis" | cut -d\| -f 3,6 | sed "s/|/: /g"
    single_line
    text_color "HISTÓRICO"
    egrep -v "#auto" "${path_cliente}/historico" | tail -n10
    single_line
    menu_edicao "${cpf}"
}

cadastrar_cliente(){
    echo Cadastrar cliente
    read -p "Nome: " nome
    [[ -z ${nome} ]] && dialog_msg "Nome não informando" && default
    unset cpf
    while [[ -z ${cpf} ]]; do
        read -p "CPF: " cpf && [ -z "$cpf" ]
    done
    cpf=$(limpa_numeros $cpf)
    read -p "Telefone: " telefone
    read -p "E-mail: " email
    read -p "Etiquetas: " etiquetas
    status="$(echo -e "Quente\nNeutro\nFrio" | fzf $FZF_OPT --prompt 'Selecione o status atual: ')"

    # Organiza e cria estrutura para pasta do cliente
    destino="${PATH_BASE}/clientes/${cpf}"
    arquivo_principal="Nome: ${nome}\nCPF: ${cpf}\nTelefone: ${telefone}\nE-mail: ${email}\nStatus: ${status}\nEtiquetas: ${etiquetas}\nEstado civil: \nProfissão: \nRG: \nEndereço: \nCEP: \n"
    cliente_lista="${nome}|${cpf}|${telefone}|${email}|${etiquetas}|${status}"

    mkdir "${destino}/"
    echo -e "$arquivo_principal" > "${destino}/cadastro"
    echo -e "$cliente_lista" >> "${PATH_BASE}/clientes/.lista"
    cadastrar_historico "$cpf" "Cliente cadastrado" "#manual"

    > "${destino}/pendencias"
    > "${destino}/funis"

    mkdir "${destino}/mails"
    mkdir "${destino}/mails/pendentes"
    mkdir "${destino}/mails/enviados"

    echo "$(tput setaf 2)[info] Cliente cadastrado com sucesso.$(tput sgr0)"
    pesquisar_cliente "${cpf}"
}

editar_qualificacao_especifica(){
    # Argumentos: 1 CPF, 2 nome da variavel, 3 Titulo
    local path_cliente="${PATH_BASE}/clientes/${1}/cadastro"
    
    read -e -p "${3}: " novo_valor

    sed -i -E "/^${3}: /c\\${3}: ${novo_valor}" "${path_cliente}"
}

editar_qualificacao(){
    path_cliente="${PATH_BASE}/clientes/${1}/cadastro"
    qualificacao "${1}"

    estado_civil="$(echo -e "solteiro(a)\ncasado(a)\nunião estável\nviúvo" | fzf $FZF_OPT --prompt 'Estado civil: ')"
    read -e -p "Profissão: " -i "${q_profissao}" -i "metroviário(a)" profissao
    read -e -p "RG: " -i "${q_rg}" rg
    read -e -p "Endereço: " -i "${q_endereco}" endereco
    read -e -p "CEP: " -i "${q_cep}" cep

    sed -i -E "/^Estado civil: /c\\Estado civil: ${estado_civil}" "${path_cliente}"
    sed -i -E "/^Profissão: /c\\Profissão: ${profissao}" "${path_cliente}"
    sed -i -E "/^RG: /c\\RG: ${rg}" "${path_cliente}"
    sed -i -E "/^Endereço: /c\\Endereço: ${endereco}" "${path_cliente}"
    sed -i -E "/^CEP: /c\\CEP: ${cep}" "${path_cliente}"
}

editar_cliente(){
    #Argumentos: 1 cpf, 2 campo a ser editado, 3 novo valor
    path_cliente="${PATH_BASE}/clientes/${1}/cadastro"
    conteudo_atual="$(egrep "\|${1}\|" "$PATH_CLIENTES_LISTA")"
    ec_nome="$(echo "$conteudo_atual" | cut -d\| -f1)"
    ec_cpf="$(echo "$conteudo_atual" | cut -d\| -f2)"
    ec_telefone="$(echo "$conteudo_atual" | cut -d\| -f3)"
    ec_email="$(echo "$conteudo_atual" | cut -d\| -f4)"
    ec_etiquetas="$(echo "$conteudo_atual" | cut -d\| -f5)"
    ec_status="$(echo "$conteudo_atual" | cut -d\| -f6)"

    case "$2" in
        "nome")
            conteudo_novo="${3}|${ec_cpf}|${ec_telefone}|${ec_email}|${ec_etiquetas}|${ec_status}"
            sed -i "/${ec_cpf}/c\\${conteudo_novo}" "${PATH_CLIENTES_LISTA}"
            sed -i -E "/^Nome: /c\\Nome: ${3}" "${path_cliente}"
            cadastrar_historico "${ec_cpf}" "Nome alterado de [${ec_nome}] para [${3}]" "#auto"
            pesquisar_cliente "${ec_cpf}"
            ;;
        "cpf")
            conteudo_novo="${ec_nome}|${3}|${ec_telefone}|${ec_email}|${ec_etiquetas}|${ec_status}"
            sed -i "/${ec_cpf}/c\\${conteudo_novo}" "${PATH_CLIENTES_LISTA}"
            sed -i -e "/^CPF: /c\\CPF: ${3}" "${path_cliente}"
            mv "${PATH_BASE}/clientes/${1}" "${PATH_BASE}/clientes/${3}"
            cadastrar_historico "${3}" "CPF alterado de [${ec_cpf}] para [${3}]" "#importante"
            pesquisar_cliente "${3}"
            ;;
        "telefone")
            conteudo_novo="${ec_nome}|${ec_cpf}|${3}|${ec_email}|${ec_etiquetas}|${ec_status}"
            sed -i "/${ec_cpf}/c\\${conteudo_novo}" "${PATH_CLIENTES_LISTA}"
            sed -i -E "/^Telefone: /c\\Telefone: ${3}" "${path_cliente}"
            cadastrar_historico "${ec_cpf}" "Telefone alterado de [${ec_telefone}] para [${3}]" "#auto"
            pesquisar_cliente "${ec_cpf}"
            ;;
        "email")
            conteudo_novo="${ec_nome}|${ec_cpf}|${ec_telefone}|${3}|${ec_etiquetas}|${ec_status}"
            sed -i "/${ec_cpf}/c\\${conteudo_novo}" "${PATH_CLIENTES_LISTA}"
            sed -i -E "/^E-mail: /c\\E-mail: ${3}" "${path_cliente}"
            cadastrar_historico "${ec_cpf}" "E-mail alterado de [${ec_email}] para [${3}]" "#auto"
            pesquisar_cliente "${ec_cpf}"
            ;;
        "etiquetas")
            conteudo_novo="${ec_nome}|${ec_cpf}|${ec_telefone}|${ec_email}|${3}|${ec_status}"
            sed -i "/${ec_cpf}/c\\${conteudo_novo}" "${PATH_CLIENTES_LISTA}"
            sed -i -E "/^Etiquetas: /c\\Etiquetas: ${3}" "${path_cliente}"
            cadastrar_historico "${ec_cpf}" "Etiquetas alteradas de [${ec_etiquetas}] para [${3}]" "#auto"
            pesquisar_cliente "${ec_cpf}"
            ;;
        "status")
            conteudo_novo="${ec_nome}|${ec_cpf}|${ec_telefone}|${ec_email}|${ec_etiquetas}|${3}"
            sed -i "/${ec_cpf}/c\\${conteudo_novo}" "${PATH_CLIENTES_LISTA}"
            sed -i -E "/^Status: /c\\Status: ${3}" "${path_cliente}"
            cadastrar_historico "${ec_cpf}" "Status alterado de [${ec_status}] para [${3}]" "#importante"
            pesquisar_cliente "${ec_cpf}"
            ;;
    esac
}

relatorios () {
    local clientes="$(wc -l ${PATH_BASE}/clientes/.lista | xargs echo | cut -d' ' -f1)"
    local pendencias="$(wc -l ${PATH_BASE}/*/*/pendencias | egrep 'total' | xargs echo | cut -d' ' -f1)"
    local path_funis="$(cat ${PATH_BASE}/clientes/*/funis)"
    local funis="$(echo -e "${path_funis}" | cut -d\| -f2 | sort -bgr | uniq -c)"

    clear
    text_color "CRM - Seja bem vindo" 2
    single_line
    text_color "RELATÓRIO"
    echo "Cliente cadastrados: ${clientes}"
    echo "Pendencias: ${pendencias}"
    echo "Funis: "
    echo -e "$funis"
    single_line
    menu_inicial
}

default () {
    #verifica_amb
    while true
    do
        clear
        text_color "CRM - Seja bem vindo" 2
        single_line
        text_color "PENDÊNCIAS" 3
        cat ${PATH_BASE}/*/*/pendencias | cut -d\| -f 3,5,6 | sed "s/|/: /g" | sort | head -n10
        single_line
        menu_inicial
        read -n1
    done
}
