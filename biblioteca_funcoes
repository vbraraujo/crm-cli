#!/bin/bash
# -----------------------------------------------------------------------------
# Projeto   : crm_cli
# Arquivo   : biblioteca_funcoes
# Descrição : Conjunto de funções principais usadas pelo crm_cli
# Versão    : 1.1.2.0
# Data      : 2021-04-23
# Autor     : Victor Araujo <victorbra@gmail.com>
# Licença   : GNU/GPL v3.0
# -----------------------------------------------------------------------------
# Uso: crm_cli
# -----------------------------------------------------------------------------

# Variáveis do sistema --------------------------------------------------------
PATH_CLIENTES="${PATH_BASE}/clientes"
PATH_CLIENTES_LISTA="${PATH_CLIENTES}/.lista"
PATH_MODULOS="${PATH_BASE}/modulos"
PATH_PROCESSOS="${PATH_BASE}/processos"
PATH_MODULOS="${PATH_BASE}/modulos"
PATH_MODELOS="${PATH_BASE}/documentos/modelos"
PATH_ACOES="${PATH_MODULOS}/acoes.list"
MENU_INICIAL=("Pesquisar cliente"
    "Pesquisar processo"
    "Cadastrar cliente"
    "Relatórios"
    "Sair"
)
DATA_HOJE="$(printf '%(%Y-%m-%d)T\n' -1)"
DATA_AGORA="$(printf '%(%Y-%m-%d_%H%M)T\n' -1)"
DATA_UMA_SEMANA="$(date --date="1 week" +"%Y-%m-%d")"
LISTA_FUNIL="$(find "${PATH_MODULOS}/" -name "*.funil" -printf "%f\n")"
LISTA_CALCULOS="$(find "${PATH_MODULOS}/" -name "*.calculos" -printf "%f\n")"
LISTA_MODELOS="$(find "${PATH_MODELOS}/" -name "*.html" -printf "%f\n")"
FZF_OPT="-i --height=20% --layout=default --border"

# Strings ---------------------------------------------------------------------
str_select_opt="Selecione uma opção: "
str_select_copy="Selecione dado a ser copiado: "
str_select_mail="Seleciona o modelo do e-mail: "
srt_copy_clip="Texto copiado no clipboard."
str_search="Pesquisar: "
str_new_value="Novo valor: "
str_sucess="Concluído com sucesso."
str_mail_fail="Cliente não possui e-mail cadastrado"
str_file_not_found="Arquivo não encontrado:"
str_report="Preparando relatórios..."
str_title="Título da ação:"
str_marital="solteiro(a)\ncasado(a)\nunião estável\nviúvo(a)\ndivorciado(a)"

# Funções ---------------------------------------------------------------------
get_text() {
    local text
    while [[ -z $text ]]; do
        read -ep "$1: " -i "$2" text
    done
    printf '%s' "$text"
}

limpa_numeros(){
    local tmp=${1//./}
    echo "${tmp//-/}"
}

menu_inicial(){
    local selected
    selected="$(printf '%s\n' "${MENU_INICIAL[@]}" | fzf $FZF_OPT --prompt "$str_select_opt")"
    case "${selected,,}" in
        "pesquisar cliente")
            pesquisar_cliente
            ;;
        "pesquisar processo")
            pesquisar_processo
            ;;
        "cadastrar cliente")
            cadastrar_cliente
            ;;
        "relatórios")
            menu_relatorios
            ;;
        *)
            exit
            ;;
    esac
}

menu_relatorios(){
    local selected
    selected="$(echo -e "Geral\nProtocolos\nVoltar" | fzf $FZF_OPT --prompt "$str_select_opt")"
    case "${selected,,}" in
        "geral")
            echo "$str_report"
            relatorios | less
            default
            ;;
        "protocolos")
            relatorio_protocolos
            ;;
        *)
            exit
            ;;
    esac

}

cadastrar_titulo_acoes(){
    local text
    read -ep "Novo título: " text
    [[ -z "${text}" ]] && pesquisar_cliente "$1"
    echo "${text}" >> "${PATH_ACOES}"
    nomear_processo "$1" "$text"
}

nomear_processo(){
    # Argumentos: 1 CPF, 2 Query para fzf
    local acoes_list selected fzf_q
    acoes_list="Voltar\nNovo\n"
    acoes_list+="$(< "${PATH_ACOES}")"

    if [[ -n "$2" ]] ; then
        selected="$(printf "$acoes_list" | fzf $FZF_OPT -q "$2" --prompt "$str_title")"
    else
        selected="$(printf "$acoes_list" | fzf $FZF_OPT --prompt "$str_title")"
    fi
    
    [[ -z $selected ]] && return

    case "${selected,,}" in
        "voltar")
            pesquisar_cliente "$1" 
            ;;
        "novo")
            cadastrar_titulo_acoes "$1"
            ;;
        *)
            echo "$selected"
            ;;
    esac        
}

pesquisar_processo(){
    #Argumentos 1 processo 2 CPF
    #Se existem argumentos, sabemos onde queremos ir, caso contrário, será necessário pesquisar.
    local processo pp_menu selected
    if [[ "$#" > 0 ]]
    then
        processo="$1"        
        [[ ! -f "${PATH_PROCESSOS}/$1" ]] && cadastrar_processo "$1" "$2"
    else
        pp_menu="Voltar\n"
        pp_menu+="$(find ${PATH_PROCESSOS}/* -type f -printf "%f\n")"
        selected="$(printf "$pp_menu" | fzf $FZF_OPT --prompt "$str_search")"
        
        case "${selected,,}" in
            "voltar")
                default
                ;;
            *)
                processo="$selected"
                ;;
        esac        
    fi

    exibir_processo "$processo" "$2"
}

cadastrar_processo(){
    #Argumentos: 1 Processo 2 CPF 3 Nome do cliente 4 Título
    local processo="${PATH_PROCESSOS}/$1"

    if [[ ! -f "$processo" ]] ; then
        local hoje="$(date +%d/%m/%Y)"
        echo "titulo=\"${4}\"
autor=(\"${3}\")
reu=()
juiz=()
relator=()
perito_jud=()
perito_part=()
valor_da_causa=\"\"
distribuido=\"${hoje}\"
condenacao=()
pagamentos=()
etiquetas=()
tramitacao=\"\"
anotacoes=()
status=\"ativo\"" > "$processo"

    fi
}

incluir_array_proc(){
    #Argumentos: 1 Processo 2 Array editada
    [[ "$#" < 2 ]] && cls && dialog_msg "Não foi possível editar o arquivo, argumentos insuficientes." && return
    
    local variable="${2}"
    local content
    read -ep "Novo valor: " content
    
    [[ -z $content ]] && read && return

    local file="${PATH_BASE}/processos/${1}"

    if [ ! -f "${file}" ]; then
        echo "$str_file_not_found ${file}"
        read
    else   
        [[ "$variable" == "anotacoes" ]] && content="${DATA_HOJE}: ${content}"
        old_value="$(grep -E "${variable}=" "$file")"
        new_value="$(sed "s~)$~ \"${content}\")~" <<< "${old_value}")"
        sed -i "s~${old_value}~${new_value}~" "${file}"
    fi
}

editar_variable_proc(){
    #Argumentos: 1 Processo 2 Variável editada
    [[ "$#" < 2 ]] && cls && dialog_msg "Não foi possível editar o arquivo, argumentos insuficientes." && return
       
    local variable="${2}"
    local content=$(get_text "$str_new_value" "${!variable}")
    local file="${PATH_BASE}/processos/${1}"

    if [ ! -f "${file}" ]; then
        echo "$str_file_not_found ${file}"
        read
    else     
        sed -i "s~^${variable}\=.*~${variable}=\"${content}\"~" "${file}"
    fi
}


menu_processo(){
    #Argumentos: 1 Processo 2 CPF
    [[ "$#" > 1 ]] && local menu=("Voltar")
    local menu+=("Início"
        "Copiar dados"
        "Editar status"
        "Editar tramitação"
        "Editar título"
        "Editar valor da causa"
        "Editar distribuído"
        "Incluir juiz"
        "Incluir relator"
        "Incluir perito judicial"
        "Incluir perito particular"
        "Incluir réu"
        "Incluir autor"
        "Incluir anotação"
        )

    local selected="$(printf '%s\n' "${menu[@]}" | fzf $FZF_OPT --prompt "$str_select_opt")"

    case "${selected,,}" in
        "início")
            default
            ;;
        "voltar")
            pesquisar_cliente "$2"
            ;;
        "editar status")
            editar_variable_proc "${1}" "status" "${2}"
            pesquisar_processo "${1}" "${2}"
            ;;
        "editar tramitação")
            editar_variable_proc "${1}" "tramitacao" "${2}"
            pesquisar_processo "${1}" "${2}"
            ;;
        "editar título")
            editar_variable_proc "${1}" "titulo" "${2}" 
            pesquisar_processo "${1}" "${2}"
            ;;
        "editar valor da causa")
            editar_variable_proc "${1}" "valor_da_causa" "${2}"
            pesquisar_processo "${1}" "${2}"
            ;;
        "editar distribuído") 
            editar_variable_proc "${1}" "distribuido" "${2}"
            pesquisar_processo "${1}" "${2}"
            ;;
        "incluir anotação")
            incluir_array_proc "${1}" "anotacoes" "${2}"
            pesquisar_processo "${1}" "${2}"
    esac
}

exibir_processo(){
    [[ $# -eq 0 ]] && pesquisar_processo

    processo_num="${1}"
    cls
    text_color "DADOS DO PROCESSO"
    single_line
    source "${PATH_PROCESSOS}/${processo_num}"

    echo "Processo: $processo_num
Título: $titulo
Autor: ${autor[@]}
Réu: ${reu[@]}
Tramitação: $tramitacao
Juiz: ${juiz[@]}
Relator: ${relator[@]}
Perito judicial: ${perito_jud[@]}
Perito particular: ${perito_part[@]}
Valor da causa: $valor_da_causa 
Distribuído: $distribuido
Status: $status
Etiquetas: $etiquetas"

    single_line
    text_color "FINANCEIRO"
    echo "Condenação:"
    printf '%s\n' "${condenacao[@]}"
    echo "Pagamentos:"
    printf '%s\n' "${pagamentos[@]}"

    single_line
    text_color "ANOTAÇÕES"
    printf '%s\n' "${anotacoes[@]}"

    menu_processo "$processo_num" "$2"
}

enviar_email(){
    #Argumentos: 1 nome, 2 cpf, 3 mail, 4 assunto, 5 modelo, 6 processo_id
    local path_mail="${PATH_BASE}/mails"
    local to_name="$1"
    local to_cpf="$2"
    local to_mail="$3"
    local subj="$4"
    local modelo="${5:-default}"
    local mail_file_pend="${PATH_BASE}/clientes/${to_cpf}/mails/pendentes/${DATA_AGORA}_${subj}"
    local mail_file_sent="${PATH_BASE}/clientes/${to_cpf}/mails/enviados/${DATA_AGORA}_${subj}"
    local path_funil="${PATH_BASE}/clientes/${to_cpf}/funis"

    case "${modelo,,}" in
        "processo")
            body="$(cat "${path_mail}/processo")"
            ee_processo="$(grep -E "^${ee_id}" "${path_funil}" | cut -d\| -f 6)"
            ee_descricao="$(grep -E "^${ee_id}" "${path_funil}" | cut -d\| -f 3)"
            ee_tipo="$(grep -E "^${ee_id}" "${path_funil}" | cut -d\| -f 4)"
            ee_local="$(grep -E "^${ee_id}" "${path_funil}" | cut -d\| -f 5)"
            body="${body/:numero:/"${ee_processo}"}"
            body="${body/:local:/"${ee_local}"}"
            body="${body/:tipo:/"${ee_tipo}"}"
            body="${body/:descricao:/"${ee_descricao}"}"
            ;;
        *)
            body="$(cat "${path_mail}/default")"
            ;;
    esac
    body="${body/:to_name:/"$to_name"}"
    printf '%s' "$body" > "${mail_file_pend}"

    neomutt -EF ~/.config/mutt/accounts/victorbruno-cajatysantiago/settings -s "${subj}" -i "${mail_file_pend}" -- "${to_mail}"
    mv "${mail_file_pend}" "${mail_file_sent}"
    cadastrar_historico "${to_cpf}" "Enviado e-mail [$subj]" "#email"
    pesquisar_cliente "${to_cpf}"
}

criar_cartao_trello(){
    #Argumentos: 1 CPF, 2 Destino, 3 Tag
    local mutt_perfil="$HOME/.config/mutt/accounts/victorbruno-cajatysantiago/settings"
    local to_mail="${2}"

    qualificacao "${1}"

    local mail_subj="${q_nome} #${3}"
    local mail_body="${q_nome^^}, brasileiro(a), ${q_estado_civil,,}, ${q_profissao,,}, inscrito sob RG n. ${q_rg} e CPF n. ${q_cpf}, residente e domiciliado à ${q_endereco}, CEP ${q_cep}"
    echo "[info]  Criando cartão no Trello..."
    echo "${mail_body}" | neomutt -F "${mutt_perfil}" -s "${mail_subj}" -- "${to_mail}" &> /dev/null
}

copiar_dados(){
    #Argumentos: 1 cpf
    qualificacao "${1}"
    local cd_qualificacao="Qualificação: ${q_nome}, brasileiro(a), ${q_estado_civil,,}, ${q_profissao,,}, inscrito(a) sob RG n. ${q_rg} e CPF n. ${q_cpf}, residente e domiciliado(a) à ${q_endereco}, CEP ${q_cep}"
    local cd_cadastro="$(cat ${PATH_BASE}/clientes/${1}/cadastro)"
    local cd_processos="$(awk -F "|" '{print $3":",$6}' "${PATH_BASE}/clientes/${1}/funis")"
    local cd_menu="${cd_qualificacao}\n${cd_cadastro}\n${cd_processos}"
    local selected="$(printf "${cd_menu}" | fzf $FZF_OPT --prompt "$str_select_copy")"
    [ "$selected" != "" ] || return
    echo "${selected#*: }" | tr -d '\n' | xclip -selection clipboard && \
    notify-send "CRM-CLI" "$str_copy_clip" -u low &
}

informar_processos(){
    #Argumentos: 1 cpf, 2 titulo
    local titulo="$2"
    texto="$(awk -F"|" -v titulo="$titulo" 'BEGIN{ line = titulo } { line = line "\n"$3 " (" $6 "): " } END{ print line }' "$PATH_BASE/clientes/$1/funis")"

    echo "$texto" | xclip -selection clipboard && \
    notify-send "CRM-CLI" "$str_copy_clip" -u low &
}

gerar_documento(){
    local path_tmp="${PATH_BASE}/documentos"
    local novo_tmp_html="${path_tmp}/tmp/${2}.tmp.html"
    local novo_tmp_pdf="${path_tmp}/tmp/${2}.tmp.pdf"
    local novo_pdf="${PATH_DOCUMENTOS}/${2}.pdf"
    local modelo="${path_tmp}/modelos/${1}"
    local timbrado="${path_tmp}/timbrado.pdf"
    local data="$(date "+%d de %B de %Y")"

    cp "$modelo" "$novo_tmp_html"

    sed -i "
        s~::nome::~${2^^}~g
        s~::estado_civil::~${3,,}~g
        s~::profissao::~${4,,}~g
        s~::rg::~${5}~g
        s~::cpf::~${6}~g
        s~::endereco::~${7}~g
        s~::cep::~${8}~g
        s~::telefone::~${9}~g
        s~::email::~${10,,}~g
        s~::objeto::~${11}~g
        s~::data::~${data}~g
    " "${novo_tmp_html}"    
    pushd "${path_tmp}/tmp" &> /dev/null
    echo "Gerando arquivo..."
    libreoffice --convert-to "pdf" "${novo_tmp_html}" &> /dev/null 
    pdftk "${novo_tmp_pdf}" stamp "${timbrado}" output "${novo_pdf}" &> /dev/null 
    echo "Limpando arquivos temporários..."
    rm "$novo_tmp_html" "$novo_tmp_pdf" &> /dev/null
    pushd &> /dev/null
    echo "$str_sucess"
    xdg-open "$PATH_DOCUMENTOS" &> /dev/null & 
}

qualificacao(){
    local q_file="${PATH_BASE}/clientes/${1}/cadastro"
    local content="$(printf "$(<"${q_file}")")"
    q_nome="$(sed -n 's/Nome: //g;1p' <<< "${content}")"
    q_cpf="$(sed -n 's/CPF: //g;2p' <<< "${content}")"
    q_telefone="$(sed -n 's/Telefone: //g;3p' <<< "${content}")"
    q_email="$(sed -n 's/E-mail: //g;4p' <<< "${content}")"
    q_estado_civil="$(sed -n 's/Estado civil: //g;7p' <<< "${content}")"
    q_profissao="$(sed -n 's/Profissão: //g;8p' <<< "${content}")"
    q_rg="$(sed -n 's/RG: //g;9p' <<< "${content}")"
    q_endereco="$(sed -n 's/Endereço: //g;10p' <<< "${content}")"
    q_cep="$(sed -n 's/CEP: //g;11p' <<< "${content}")"
}

consultar_nome(){    
    # Argumentos: 1 cpf
    local c_lista="${PATH_BASE}/clientes/.lista"
    awk -F\| -v cpf="$1" '
    $2=="cpf" { print substr($1,0,15) }' "$c_lista"
}

verificar_qualificacao(){
    qualificacao "${1}"
    [[ -z "${q_estado_civil}" ]] && cls && dialog_msg "Qualificação incompleta" && editar_qualificacao "${1}"
}

preparar_doc(){
    #Argumentos: 1 CPF, 2 Modelo
    cls
    text_color "GERAR DOCUMENTO" 2
    single_line
    qualificacao "${1}"
    [[ "${2}" != "modelo_procuracao.html" ]] && read -e -p "Objeto do contrato: " -i "Reclamação trabalhista em face do Metrô-DF " gd_objeto
    gerar_documento "${2}" "${q_nome}" "${q_estado_civil}" "${q_profissao}" "${q_rg}" "${q_cpf}" "${q_endereco}" "${q_cep}" "${q_telefone}" "${q_email}" "${gd_objeto}" 
}

menu_cliente(){
    #Argumentos: 1 CPF
    conteudo_atual="$(grep -E "\|${1}\|" "$PATH_CLIENTES_LISTA")"
    me_nome="$( cut -d\| -f1 <<< "$conteudo_atual" )"
    me_cpf="$( cut -d\| -f2 <<< "$conteudo_atual" )"
    me_telefone="$( cut -d\| -f3 <<< "$conteudo_atual" )"
    me_email="$( cut -d\| -f4 <<< "$conteudo_atual" )"
    me_etiquetas="$( cut -d\| -f5 <<< "$conteudo_atual" )"

    menu_cliente=("Voltar/Sair" "Editar Nome" "Editar CPF" "Editar Telefone" "Editar E-mail" "Editar Status" "Editar Etiquetas" "Copiar dados" "Incluir Anotação" "Incluir Funil" "Incluir Pendência" "Ver Cadastro" "Ver Histórico" "Ver Pendências" "Concluir Pendência" "Excluir Funil" "Cadastrar Processo" "Enviar E-mail" "Editar Qualificação" "Gerar Documento" "Ver Arquivos" "Incluir comunicação por Whatsapp" "Incluir comunicação por Telegram" "Incluir comunicação por E-Mail" "Incluir comunicação por Telefone" "Incluir comunicação Pessoal" "Adiar Pendências" "Atualização de andamentos" "Cálculos" "Ver Processo")

    selected="$(printf '%s\n' "${menu_cliente[@]}" | fzf $FZF_OPT --prompt "$str_select_opt")"
    case "${selected,,}" in
        "editar nome")
            single_line
            novo_valor=$(get_text "Novo nome" "$me_nome")
            editar_cliente "${1}" "nome" "${novo_valor}"
            ;;
        "editar telefone")
            single_line
            novo_valor=$(get_text "Novo telefone" "$me_telefone")
            editar_cliente "${1}" "telefone" "${novo_valor}"
            ;;
        "editar e-mail")
            single_line
            novo_valor=$(get_text "Novo e-mail" "$me_email")
            editar_cliente "${1}" "email" "${novo_valor}"
            ;;
        "editar cpf")
            single_line
            novo_valor=$(get_text "Novo CPF" "$1")
            novo_valor=$(limpa_numeros $novo_valor)
            editar_cliente "${1}" "cpf" "${novo_valor}"
            ;;
        "editar status")
            single_line
            novo_valor="$(printf "Quente\nNeutro\nFrio" | fzf $FZF_OPT --prompt 'Selecione o status atual: ')"
            editar_cliente "${1}" "status" "${novo_valor}"
            ;;
        "editar etiquetas")
            single_line
            novo_valor=$(get_text "Novas etiquetas" "$me_etiquetas")
            editar_cliente "${1}" "etiquetas" "${novo_valor}"
            ;;
        "editar qualificação")
            editar_qualificacao "${1}"
            pesquisar_cliente "${1}"
            ;;
        "enviar e-mail")
            [[ -z $me_email ]] && cls && dialog_msg "$str_mail_fail" && pesquisar_cliente "${me_cpf}"
            path_funil="${PATH_BASE}/clientes/${1}/funis"
            ee_lista="Novo\nVoltar/Sair\n"
            ee_lista+="$(awk -F "|" '{print $1,$3,$6,"-",$2}' "${path_funil}")"
            ee_id="$(printf "$ee_lista" | fzf $FZF_OPT --prompt 'Selecione o modelo do e-mail: ')"
            ee_id="$(echo ${ee_id%% *})"
            case "${ee_id,,}" in
                "voltar/sair")
                    pesquisar_cliente "${1}"
                    ;;
                "novo")
                    enviar_email "${me_nome}" "${me_cpf}" "${me_email}" "[CS] Informações" "default"
                    ;;
                *)
                    ee_descricao="$(grep -E "^${ee_id}" "${path_funil}" | cut -d\| -f 3)"
                    enviar_email "${me_nome}" "${me_cpf}" "${me_email}" "[CS] Informações sobre ${ee_descricao}" "processo" "${ee_id}"
                    ;;
            esac
            ;;
        "copiar dados")
            copiar_dados "${1}"
            pesquisar_cliente "${1}"
            ;;
        "incluir anotação")
            cls
            text_color "INCLUIR NOVA ANOTAÇÃO" 2
            single_line
            novo_valor=$(get_text "Anotação")
            cadastrar_historico "${1}" "${novo_valor}" "#anotação"
            pesquisar_cliente ${1}
            ;;
        "incluir comunicação por whatsapp")
            cadastrar_historico "${1}" "Contato por Whatsapp " "#comunicação"
            pesquisar_cliente ${1}
            ;;
        "incluir comunicação por telegram")
            cadastrar_historico "${1}" "Contato por Telegram " "#comunicação"
            pesquisar_cliente ${1}
            ;;
        "incluir comunicação por e-mail")
            cadastrar_historico "${1}" "Contato por E-Mail " "#comunicação"
            pesquisar_cliente ${1}
            ;;
        "incluir comunicação por telefone")
            cadastrar_historico "${1}" "Contato por Telefone " "#comunicação"
            pesquisar_cliente ${1}
            ;;
        "incluir comunicação pessoal")
            cadastrar_historico "${1}" "Contato pessoal" "#comunicação"
            pesquisar_cliente ${1}
            ;;
        "incluir funil")
            single_line
            if_arquivo="$(printf "$LISTA_FUNIL" | fzf $FZF_OPT --prompt 'Selecione funil a incluir: ')"
            cadastrar_funil "${1}" "${if_arquivo}"
            ;;
        "cálculos")
            single_line
            calc_arquivo="$(printf "$LISTA_CALCULOS" | fzf $FZF_OPT --prompt 'Selecione o cálculos a ser feito: ')"
            fazer_calculo "${1}" "${calc_arquivo}"
            ;;
        "excluir funil")
            ef_lista="Voltar/Sair\n"
            ef_lista+="$(awk -F "|" '{print $1,$3,$6,"-",$2}' "${PATH_BASE}/clientes/${1}/funis")"
            ef_id="$(printf "$ef_lista" | fzf $FZF_OPT --prompt 'Selecione funil a excluir: ')"
            ef_id="$(echo ${ef_id%% *})"
            [[ $ef_id == "Voltar/Sair" ]] && pesquisar_cliente ${1} || excluir_funil "${1}" "${ef_id}"
            ;;
        "ver processo")
            local path_funil="${PATH_BASE}/clientes/${1}/funis"
            local vp_lista="Voltar/Sair\n"
            local vp_lista+="$(awk -F "|" '{ print $1"|"$3"|"$6 }' "${path_funil}")"
            local vp_selected="$(printf "$vp_lista" | fzf $FZF_OPT --prompt 'Selecione processo: ' )" 
            if [[ $vp_selected == "Voltar/Sair" ]] ; then
                pesquisar_cliente "${1}"
            else
                local vp_processo=$(awk -F "|" '{ print $3 }' <<< "${vp_selected}")
                pesquisar_processo "${vp_processo}" "${me_cpf}"
            fi
            ;;
        "cadastrar processo")
            path_funil="${PATH_BASE}/clientes/${1}/funis"
            cp_lista="Voltar/Sair\n"
            cp_lista+="$(awk -F "|" '{print $1,$3,$6,"-",$2}' "${path_funil}")"
            cp_id="$(printf "$cp_lista" | fzf $FZF_OPT --prompt 'Selecione funil a cadastrar/alterar processo: ')"
            cp_id="$(echo ${cp_id%% *})"
            cp_processo="$(grep -E "^${cp_id}" "${path_funil}" | cut -d\| -f 6)"
            cp_descricao="$(grep -E "^${cp_id}" "${path_funil}" | cut -d\| -f 3)"
            cp_novo_processo=$(get_text "Número do processo" "$cp_processo")
            cp_novo_processo=$(limpa_numeros $cp_novo_processo)
            cp_nova_descricao=$(nomear_processo "$1")
            if [[ $cp_id == "Voltar/Sair" ]] ; then
               pesquisar_cliente ${1} 
           else
               cadastrar_processo "${cp_novo_processo}" "${me_cpf}" "${me_nome}" "${cp_nova_descricao}"
               editar_funil "${1}" "${cp_id}" "${cp_novo_processo}" "${cp_nova_descricao}"
            fi
            ;;
        "incluir pendência")
            single_line
            novo_valor=$(get_text "Pendência")
            cadastrar_pendencia "${1}" "${DATA_UMA_SEMANA}" "manual" "${novo_valor}"
            pesquisar_cliente "${1}"
            ;;
        "concluir pendência")
            path_pend="${PATH_BASE}/clientes/.pendencias"
            cp_lista="Voltar/Sair\n"
            cp_lista+="$(awk -F "|" -v cpf="$1" '$5==cpf {print $3"|"$1"|"$6}' "${path_pend}" | sort)"
            cp_id="$(printf "$cp_lista" | fzf $FZF_OPT --prompt 'Pendencia a ser concluída: ' | cut -d\| -f2)"
            [[ $cp_id == "Voltar/Sair" ]] && pesquisar_cliente ${1} || concluir_pendencia "${1}" "${cp_id}"
            ;;
        "adiar pendências")
            path_pend="${PATH_BASE}/clientes/.pendencias"
            ap_lista="Voltar/Sair\n"
            ap_lista+="$(awk -F "|" -v cpf="$1" '$5==cpf {print $3"|"$4"|"$6}' "${path_pend}" | sort)"
            ap_funil_id="$(printf "$ap_lista" | fzf $FZF_OPT --prompt 'Selecione pendencia a ser concluída: ' | cut -d\| -f2)"
            single_line
            read -p "Quantidade de dias a serem acrescidos: " dias
            [[ $ap_funil_id == "Voltar/Sair" ]] && pesquisar_cliente ${1} || adiar_pendencias "${1}" "${ap_funil_id}" "${dias}"
            ;;
        "ver cadastro")
            vim "${PATH_BASE}/clientes/${1}/cadastro"
            pesquisar_cliente "${1}"
            ;;
        "ver pendências")
            grep "${1}" "${PATH_BASE}/clientes/.pendencias" | less
            pesquisar_cliente "${1}"
            ;;
        "ver histórico")
            vim "${PATH_BASE}/clientes/${1}/historico"
            pesquisar_cliente "${1}"
            ;;
        "gerar documento")
            single_line
            LISTA_MODELOS+="\nVoltar\n"
            modelo_selected="$(printf "${LISTA_MODELOS}" | fzf $FZF_OPT --prompt 'Selecione o modelo: ')"
            [[ $modelo_selected == "Voltar" ]] && pesquisar_cliente "${1}"
            verificar_qualificacao "${1}"
            preparar_doc "${1}" "${modelo_selected}"
            pesquisar_cliente "${1}"
            ;;

        "ver arquivos")
            local path_docs="${PATH_BASE}/clientes/${1}/documentos"
            mkdir -p "${path_docs}" && mkdir -p "${path_docs}/fichas_financeiras" 
            mkdir -p "${path_docs}/pdc"
            nohup xdg-open "${path_docs}" &>/dev/null &
            pesquisar_cliente "${1}"
            ;;

        "atualização de andamentos")
            informar_processos "${1}" "Atualização de andamentos:"
            pesquisar_cliente "${1}"
            ;;
        *)
            pesquisar_cliente
            ;;
    esac
}

criar_dir_nova_acao(){
    qualificacao "${1}"
    local dir_destino="${PATH_NOVA_ACAO}/${q_nome,,} - $TITULO"
    mkdir -p "${dir_destino}"
    cp -r ${PATH_CLIENTES}/${1}/documentos/* "${dir_destino}"
    echo "Tecla para continuar" && read
}

cadastrar_funil(){
    #Argumentos: 1 CPF, 2 arquivo do funil
    if [ "$#" -gt 1 ]
        then
            single_line
            echo "INCLUIR FUNIL"
            source "$PATH_MODULOS/${2}"
            pesquisar_cliente "${1}"
    fi
}

fazer_calculo(){
    #Argumentos: 1 CPF, 2 arquivo do funil
    if [ "$#" -eq 2 ]
        then
            single_line
            echo "FAZER CALCULO"
            source "$PATH_MODULOS/${2}" 
            pesquisar_cliente ${1}
    fi
}

excluir_funil(){
    #Argumentos: 1 CPF, 2 funil id
    if [ "$#" -eq 2 ]
        then
            path_funil="${PATH_BASE}/clientes/${1}/funis"
            path_pend="${PATH_BASE}/clientes/.pendencias"
            ef_id="$(grep -E "${2}" ${path_funil} | cut -d\| -f 1)"
            ef_descricao="$(grep -E "${2}" ${path_funil} | cut -d\| -f 3)"
            sed -i -E "/^${2}\|/d" "${path_funil}"
            sed -i -E "/funil_id${2}\|${1}/d" "${path_pend}"
            cadastrar_historico "${1}" "Excluído funil [${ef_descricao}]" "#funil"
            pesquisar_cliente ${1}
    fi
}

editar_funil(){
    #Argumentos: 1 cpf, 2 funil id, 3 número do processo, 4 descrição 
    path_funil="${PATH_BASE}/clientes/${1}/funis"
    sed -i -E '/^'"$2"'\|/s/[^|]*/'"$3"'/6' "$path_funil"
    sed -i -E '/^'"$2"'\|/s/[^|]*/'"$4"'/3' "$path_funil"
    cadastrar_historico "${1}" "Editado processo do funil id [${2}] para [Número ${3} Descrição ${4}]" "#auto"
    pesquisar_cliente "${1}"
}

cadastrar_historico(){
    #Argumentos: 1 CPF, 2 descrição, 3 tags
    if [ "$#" -eq 3 ]
        then
            path_hist="${PATH_BASE}/clientes/${1}/historico"
            linha="$DATA_HOJE: $2 $3"
            printf "$linha\n" >> "$path_hist"

        else
            echo "Não foi possível criar anotação automática. Favor informar os dados a seguir."
            descicao=$(get_text "Descrição")
            cpf=$(get_text "CPF")
            tags=$(get_text "Tags")
            path_hist="${PATH_BASE}/clientes/${cpf}/historico"
            linha="$DATA_HOJE: $descricao $tags"
            printf "$linha\n" >> "$path_hist"
    fi
}

cadastrar_pendencia(){
    #Argumentos: 1 CPF, 2 limite, 3 origem, 4 descrição
    if [ "$#" -eq 4 ]
        then
            path_pend="${PATH_BASE}/clientes/.pendencias"
            cp_id="$(awk '{id=$1+1}END{print id}' ${path_pend})"
            [[ -z "${cp_id}" ]] && cp_id=1
            #Linha: data | limite | origem | cpf | descrição
            linha="${cp_id}|${DATA_HOJE}|${2}|${3}|${1}|${4}"
            printf "$linha\n" >> "$path_pend"
            cadastrar_historico "${1}" "Criada pendência [${4}]" "#auto"

        else
            echo "Não foi possível criar pendência automática. Favor informar os dados a seguir."
            descicao=$(get_text "Descrição")
            cpf=$(get_text "CPF")
            path_pend="${PATH_BASE}/clientes/.pendencias"
            cp_id="$(awk '{id=$1+1}END{print id}' ${path_pend})"
            [[ ${cp_id} == "" ]] && ${cp_id}=1
            linha="${cp_id}|${DATA_HOJE}|${DATA_UMA_SEMANA}|manual|${cpf}|${descricao}"
            printf "$linha\n" >> "$path_pend"
            cadastrar_historico "${1}" "Criada pendência [${descricao}]" "#auto"
            pesquisar_cliente ${1}
    fi
}

concluir_pendencia(){
    #Argumentos: 1 CPF, 2 Id da pendência
    if [ "$#" -eq 2 ]
        then
            path_pend="${PATH_BASE}/clientes/.pendencias"
            cp_descricao="$(grep -E "^${2}\|" ${path_pend} | cut -d\| -f 6)"
            sed -i -E "/^${2}\|/d" "${path_pend}"
            cadastrar_historico "${1}" "Concluída pendência [${cp_descricao}]" "#auto"
            pesquisar_cliente ${1}
    fi

}

adiar_pendencias(){
    #Argumentos: 1 CPF, 2 Id do funil da pendência, 3 Quantidade de dias a acrescentar
    if [ "$#" -eq 3 ]
        then
            path_pend="${PATH_BASE}/clientes/.pendencias"
            awk -v funil="$2" -v dias="$3" -i inplace -F\| '$4 == funil { cmd = "date -d \""$3" "dias" days\" \"+%Y-%m-%d\"";cmd|getline D; close(cmd); $3=D } 1' OFS="|" "${path_pend}"
            cadastrar_historico "${1}" "Pendências cadastradas sob [${2}] adiadas em $3 dias" "#auto"
            pesquisar_cliente ${1}
    fi

}

verificar_diretorio_vazio(){
    if [ -z "$(find "${1}" -type f 2>/dev/null)" ]; then
        echo "vazio"
    fi
}

exibir_icones_docs(){
    local path_cli_doc="${PATH_BASE}/clientes/${1}/documentos"
    local check_fichas="$(verificar_diretorio_vazio "${path_cli_doc}/fichas_financeiras")"
    pc_files=""
    [[ -f "${path_cli_doc}/documentos_pessoais.pdf" ]] && pc_files+="|  "
    [[ -f "${path_cli_doc}/comprovante_de_residencia.pdf" ]] && pc_files+="|  "
    [[ ${check_fichas} != "vazio" ]] && pc_files+="| ﴝ "
}
calcula_idade(){
    local nascimento nascimento_f hoje idade
    if [ $# -eq 1 ]
    then
        cpf="${1}"
    else
        return
    fi
    nascimento="$(awk '$3=="nascimento:" { print $4 }' $PATH_BASE/clientes/$1/cadastro )"
    
    [[ -z $nascimento ]] && return

    nascimento_f="$(busybox date -D %d/%m/%Y -d "$nascimento" +%Y%m%d)"
    hoje="$(date "+%Y%m%d")"
    idade=$((($hoje-$nascimento_f)/10000))
    echo $idade
}

pesquisar_cliente(){
    if [ "$#" -eq 1 ]
    then
        cpf="${1}"
    else
        local pc_lista="Voltar/Sair\nCadastrar novo cliente\n"
        local pc_lista+="$(awk -F\| '{ print $1"|"$2"|"$3 }' ${PATH_BASE}/clientes/.lista )"
        local selected="$(printf "$pc_lista" | fzf $FZF_OPT --prompt "$str_search")"
        case "${selected,,}" in
            "voltar/sair")
                default
                ;;
            "cadastrar novo cliente")
                cadastrar_cliente
                ;;
            *)
                cpf="$( cut -d\| -f2 <<< $selected)"
            ;;
        esac
    fi

    local idade="| $(calcula_idade $cpf)"

    path_cliente="${PATH_BASE}/clientes/${cpf}"
    cls
    exibir_icones_docs "${cpf}"
    text_color "DADOS DO CLIENTE ${idade} ${pc_files}"
    single_line
    head -n13 "${path_cliente}/cadastro"
    sed '22q;d' "${path_cliente}/cadastro" # Exibir data de demissão/falecimento
    sed '23q;d' "${path_cliente}/cadastro" # Exibir data de nascimento
    sed '24q;d' "${path_cliente}/cadastro" # Exibir data de contratação
    single_line
    text_color "PENDENCIAS"
    grep ${cpf} "${PATH_BASE}/clientes/.pendencias" | cut -d\| -f 3,6 | sed "s/|/: /g" | sort | head -n5
    single_line
    text_color "FUNIS"
    cat "${path_cliente}/funis" | cut -d\| -f 3,6 | sed "s/|/: /g"
    single_line
    text_color "ANOTAÇÕES"
    grep "#anotação" "${path_cliente}/historico" | tail -n3
    single_line
    text_color "HISTÓRICO"
    grep -E -v "#auto|#anotação" "${path_cliente}/historico" | tail -n4
    menu_cliente "${cpf}"
}

cadastrar_cliente(){
    cls
    text_color "CADASTRAR CLIENTE"
    single_line
    read -p "Nome: " nome
    [[ -z ${nome} ]] && cls && dialog_msg "Nome não informando" && default
    unset cpf
    while [[ -z ${cpf} ]]; do
        read -p "CPF: " cpf && [ -z "$cpf" ]
    done
    cpf=$(limpa_numeros $cpf)
    telefone=$(get_text "Telefone")
    email=$(get_text "E-mail")
    etiquetas=$(get_text "Etiquetas")
    status="$(printf "Quente\nNeutro\nFrio" | fzf $FZF_OPT --prompt 'Selecione o status atual: ')"

    # Organiza e cria estrutura para pasta do cliente
    destino="${PATH_BASE}/clientes/${cpf}"
    arquivo_principal="Nome: ${nome}\nCPF: ${cpf}\nTelefone: ${telefone}\nE-mail: ${email}\nStatus: ${status}\nEtiquetas: ${etiquetas,,}\nEstado civil: \nProfissão: \nRG: \nEndereço: \nCEP: \nMatrícula: \nCargo: \nFunção gratificada: \nSituação funcional: \nHoras base mensal: \nHoras base semanal: \nHoras base acordo: \nPericulosidade: \nInsalubridade: \nSituação: \nData de exon/dem/falecimento: \nData de nascimento: \nData de admissão: \nEscolaridade: \nTitulo eleitoral: \nNaturalidade: \nSexo: \nPIS/PASEP: \nConjuge: \nPai: \nMãe: \nDados bancários: "
    cliente_lista="${nome}|${cpf}|${telefone}|${email}|${etiquetas}|${status}"

    mkdir "${destino}/"
    printf "$arquivo_principal" > "${destino}/cadastro"
    printf "$cliente_lista\n" >> "${PATH_BASE}/clientes/.lista"
    cadastrar_historico "$cpf" "Cliente cadastrado" "#manual"

    > "${destino}/funis"

    mkdir -p "${destino}/mails/pendentes" && mkdir -p "${destino}/mails/enviados"

    mkdir -p "${destino}/documentos/fichas_financeiras" 

    echo "$(tput setaf 2)[info] Cliente cadastrado com sucesso.$(tput sgr0)"
    pesquisar_cliente "${cpf}"
}

editar_qualificacao_especifica(){
    # Argumentos: 1 CPF, 2 nome da variavel, 3 Titulo
    local path_cliente="${PATH_BASE}/clientes/${1}/cadastro"
    
    novo_valor=$(get_text "$3")
    sed -i -E "/^${3}: /c\\${3}: ${novo_valor}" "${path_cliente}"
}

editar_qualificacao(){
    path_cliente="${PATH_BASE}/clientes/${1}/cadastro"
    qualificacao "${1}"

    estado_civil="$(printf "$str_marital" | fzf $FZF_OPT --prompt 'Estado civil: ')"
    profissao=$(get_text "Profissão" "$q_profissao" )
    rg=$(get_text "RG" "$q_rg" )
    endereco=$(get_text "Endereço" "$q_endereco" )
    cep=$(get_text "CEP" "$q_cep" )

    sed -i -E "/^Estado civil: /c\\Estado civil: ${estado_civil,,}" "${path_cliente}"
    sed -i -E "/^Profissão: /c\\Profissão: ${profissao,,}" "${path_cliente}"
    sed -i -E "/^RG: /c\\RG: ${rg}" "${path_cliente}"
    sed -i -E "/^Endereço: /c\\Endereço: ${endereco}" "${path_cliente}"
    sed -i -E "/^CEP: /c\\CEP: ${cep}" "${path_cliente}"
}

editar_cliente(){
    #Argumentos: 1 cpf, 2 campo a ser editado, 3 novo valor
    path_cliente="${PATH_BASE}/clientes/${1}/cadastro"
    conteudo_atual="$(grep -E "\|${1}\|" "$PATH_CLIENTES_LISTA")"
    ec_nome="$( cut -d\| -f1 <<< "$conteudo_atual" )"
    ec_cpf="$( cut -d\| -f2 <<< "$conteudo_atual" )"
    ec_telefone="$( cut -d\| -f3 <<< "$conteudo_atual" )"
    ec_email="$( cut -d\| -f4 <<< "$conteudo_atual" )"
    ec_etiquetas="$( cut -d\| -f5 <<< "$conteudo_atual" )"
    ec_status="$( cut -d\| -f6 <<< "$conteudo_atual" )"

    case "${2,,}" in
        "nome")
            conteudo_novo="${3}|${ec_cpf}|${ec_telefone}|${ec_email}|${ec_etiquetas}|${ec_status}"
            sed -i "/${ec_cpf}/c\\${conteudo_novo}" "${PATH_CLIENTES_LISTA}"
            sed -i -E "/^Nome: /c\\Nome: ${3}" "${path_cliente}"
            cadastrar_historico "${ec_cpf}" "Nome alterado de [${ec_nome}] para [${3}]" "#auto"
            pesquisar_cliente "${ec_cpf}"
            ;;
        "cpf")
            conteudo_novo="${ec_nome}|${3}|${ec_telefone}|${ec_email}|${ec_etiquetas}|${ec_status}"
            sed -i "/${ec_cpf}/c\\${conteudo_novo}" "${PATH_CLIENTES_LISTA}"
            sed -i -e "/^CPF: /c\\CPF: ${3}" "${path_cliente}"
            mv "${PATH_BASE}/clientes/${1}" "${PATH_BASE}/clientes/${3}"
            cadastrar_historico "${3}" "CPF alterado de [${ec_cpf}] para [${3}]" "#importante"
            pesquisar_cliente "${3}"
            ;;
        "telefone")
            conteudo_novo="${ec_nome}|${ec_cpf}|${3}|${ec_email}|${ec_etiquetas}|${ec_status}"
            sed -i "/${ec_cpf}/c\\${conteudo_novo}" "${PATH_CLIENTES_LISTA}"
            sed -i -E "/^Telefone: /c\\Telefone: ${3}" "${path_cliente}"
            cadastrar_historico "${ec_cpf}" "Telefone alterado de [${ec_telefone}] para [${3}]" "#auto"
            pesquisar_cliente "${ec_cpf}"
            ;;
        "email")
            conteudo_novo="${ec_nome}|${ec_cpf}|${ec_telefone}|${3}|${ec_etiquetas}|${ec_status}"
            sed -i "/${ec_cpf}/c\\${conteudo_novo}" "${PATH_CLIENTES_LISTA}"
            sed -i -E "/^E-mail: /c\\E-mail: ${3}" "${path_cliente}"
            cadastrar_historico "${ec_cpf}" "E-mail alterado de [${ec_email}] para [${3}]" "#auto"
            pesquisar_cliente "${ec_cpf}"
            ;;
        "etiquetas")
            conteudo_novo="${ec_nome}|${ec_cpf}|${ec_telefone}|${ec_email}|${3}|${ec_status}"
            sed -i "/${ec_cpf}/c\\${conteudo_novo}" "${PATH_CLIENTES_LISTA}"
            sed -i -E "/^Etiquetas: /c\\Etiquetas: ${3}" "${path_cliente}"
            cadastrar_historico "${ec_cpf}" "Etiquetas alteradas de [${ec_etiquetas}] para [${3}]" "#auto"
            pesquisar_cliente "${ec_cpf}"
            ;;
        "status")
            conteudo_novo="${ec_nome}|${ec_cpf}|${ec_telefone}|${ec_email}|${ec_etiquetas}|${3}"
            sed -i "/${ec_cpf}/c\\${conteudo_novo}" "${PATH_CLIENTES_LISTA}"
            sed -i -E "/^Status: /c\\Status: ${3}" "${path_cliente}"
            cadastrar_historico "${ec_cpf}" "Status alterado de [${ec_status}] para [${3}]" "#importante"
            pesquisar_cliente "${ec_cpf}"
            ;;
    esac
}

relatorios () {
    local clientes="$(wc -l ${PATH_BASE}/clientes/.lista | cut -d' ' -f1)"
    local pendencias="$(wc -l ${PATH_BASE}/clientes/.pendencias | cut -d' ' -f1)"
    local path_funis="$(cat ${PATH_BASE}/clientes/*/funis)"
    local funis="$(printf "${path_funis}" | cut -d\| -f3| sort -bgr | uniq -c)"

    echo "RELATÓRIO"
    single_line
    echo "Cliente cadastrados: ${clientes}"
    echo "Pendencias: ${pendencias}"
    echo "Funis: "
    printf "$funis\n"
    single_line
}

relatorio_protocolos(){
    local month y year last_year total report
    year=$(date "+%Y")
    last_year=$(( $year - 1 ))
    report="Total de processos distribuídos em ${last_year} e ${year}:\n"
    for y in $last_year $year ; do
        for month in {01..12} ; do 
            total=$(grep "Editado processo do funil id" ${PATH_CLIENTES}/*/historico | grep "${y}-${month}" | wc -l)
            report+="${month}/${y}: $total\n"
        done
    done
    printf "${report}" | less
    default
}

exibir_pendencias () {
    cat ${PATH_BASE}/clientes/.pendencias | cut -d\| -f 3,5,6 | sort | head -n12 > "${PATH_BASE}/tmp/.pendencias"
    local p_lista="${PATH_BASE}/clientes/.lista"
    local p_pendencias="${PATH_BASE}/tmp/.pendencias"

    awk -F\| '
        NR == FNR { cliente[$2] = substr($1,0,20); next }
        {
            data = ""

            if ($1 != strdata) {
                strdata = $1
                gsub("-", " ", $1)
                data = strftime("%d de %B de %Y", mktime($1" 0 0 0"))
                if (FNR > 1) {
                    data = "\n" data
                    linha = linha "\n"
                }
            }
            linha = linha data "\n- " cliente[$2] ": " $3
        }

        END {
            print linha
        }
    ' "$p_lista" "$p_pendencias"
}

default () {
    #verifica_amb
    while :; do
        cls
        text_color "CRM - Seja bem vindo" 2
        single_line
        text_color "PENDÊNCIAS" 3
        exibir_pendencias
        menu_inicial
        read -n1
    done
}
